{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Resources/sonarqube1.PNG","path":"Resources/sonarqube1.PNG","modified":0,"renderable":0},{"_id":"source/Resources/sonarqube2.PNG","path":"Resources/sonarqube2.PNG","modified":0,"renderable":0},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.js","path":"PhotoSwipe/photoswipe-ui-default.js","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.min.js","path":"PhotoSwipe/photoswipe-ui-default.min.js","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.css","path":"PhotoSwipe/photoswipe.css","modified":0,"renderable":1},{"_id":"themes/chan/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.min.js","path":"PhotoSwipe/photoswipe.min.js","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/archive.styl","path":"styles/archive.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/article.styl","path":"styles/article.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/footer.styl","path":"styles/footer.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/highlight.styl","path":"styles/highlight.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/main.styl","path":"styles/main.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/layout.styl","path":"styles/layout.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/monochrome.styl","path":"styles/monochrome.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/mobile-header.styl","path":"styles/mobile-header.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/post-list.styl","path":"styles/post-list.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/pagination.styl","path":"styles/pagination.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/sidebar.styl","path":"styles/sidebar.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/third-party.styl","path":"styles/third-party.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/variables.styl","path":"styles/variables.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.js","path":"PhotoSwipe/photoswipe.js","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.css","path":"PhotoSwipe/default-skin/default-skin.css","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.png","path":"PhotoSwipe/default-skin/default-skin.png","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.svg","path":"PhotoSwipe/default-skin/default-skin.svg","modified":0,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/preloader.gif","path":"PhotoSwipe/default-skin/preloader.gif","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/by.png","path":"images/cc/by.png","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/cc.png","path":"images/cc/cc.png","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/nc.png","path":"images/cc/nc.png","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/nd.png","path":"images/cc/nd.png","modified":0,"renderable":1},{"_id":"themes/chan/source/images/cc/sa.png","path":"images/cc/sa.png","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.css","path":"perfect-scrollbar/css/perfect-scrollbar.css","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.min.css","path":"perfect-scrollbar/css/perfect-scrollbar.min.css","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.jquery.js","path":"perfect-scrollbar/js/perfect-scrollbar.jquery.js","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.js","path":"perfect-scrollbar/js/perfect-scrollbar.js","modified":0,"renderable":1},{"_id":"themes/chan/source/styles/libs/normalize.styl","path":"styles/libs/normalize.styl","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","path":"perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","modified":0,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.min.js","path":"perfect-scrollbar/js/min/perfect-scrollbar.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/chan/README.md","hash":"520507fcb88d13e9d808eccf7ca6797270c02563","modified":1461777739574},{"_id":"themes/chan/LICENSE","hash":"016e04350831182d3b1fdf08212a3292634a6dbb","modified":1461777739574},{"_id":"themes/chan/_config.yml","hash":"718a22b3e492297fa53f850043734e106ad4e0c1","modified":1461781943906},{"_id":"themes/chan/cc.png","hash":"eb4f6de9697f43e2c59ae358c25b7a4c92a17798","modified":1461777739574},{"_id":"themes/chan/package.json","hash":"16257778371b5907e39533d6e1a48cd40800434c","modified":1461777739578},{"_id":"source/Resources/sonarqube1.PNG","hash":"b52381de51456c9bff415ac19e6e89155d03d212","modified":1461781268268},{"_id":"source/Resources/sonarqube2.PNG","hash":"ea158188784e6b07b995465d386fd88eb6cb9fcb","modified":1461781268272},{"_id":"source/_posts/01-26-gitbook-the-beginning.md","hash":"f392f9ff4abe082581adedd62ea04cb758d8df12","modified":1461783678738},{"_id":"source/_posts/01-26-c-sharp-complex-constructors.md","hash":"d09df0e83bac4f0fb48982aafbaf1ee552234f29","modified":1461783675906},{"_id":"source/_posts/01-27-interface-with-extension-methods.md","hash":"6eeee65c3cae548a41a3bf276d4af9494aff0bf1","modified":1461783845777},{"_id":"source/_posts/01-27-meteor-the-beginning.md","hash":"3946af795016ce4d526985f5745eaaf4c198d802","modified":1461784754189},{"_id":"source/_posts/01-29-csharp-path-to-system-folders.md","hash":"4f925baf630f4f225f39d89f503ea838263114e0","modified":1461784804578},{"_id":"source/_posts/01-29-git-branches-tags-and-commits.md","hash":"f8cb7dfd06d5e0f87376e478447e04ecd72fd1f6","modified":1461784826970},{"_id":"source/_posts/02-01-vnext-sonarqube-integration.md","hash":"48813e05200206d9eb9953505f369593ee097cf5","modified":1461784965645},{"_id":"source/_posts/02-03-meteor-query-subdocument.md","hash":"7e7915d245d3ca79df5484654297b7940c968dd3","modified":1461824981405},{"_id":"source/_posts/02-04-csharp-path-combine.md","hash":"0369ddd4455c4214ebee93339196e468640bf56c","modified":1461824912340},{"_id":"source/_posts/02-04-meteor-session-variables.md","hash":"2abbb26a75bf5ec09ccc4a7e8feed836c3775bf7","modified":1461785306886},{"_id":"source/_posts/02-05-meteor-flowRouter.md","hash":"4f64b1c7112b0e81a54d7622e1bee7b46dacb626","modified":1461785344526},{"_id":"source/_posts/04-18-sonarqube-update-when-ldapmd.md","hash":"9135449cd4c6e2ce6f00cd20e6fc5a84e72e9cf9","modified":1463598451696},{"_id":"source/_posts/03-02-unit-test-cheatsheet.md","hash":"a49c22534e402e957561b9d956a7e5f2a0d55baf","modified":1461785392406},{"_id":"source/_posts/04-17-ubuntu-not-turning-off-or-restartingmd.md","hash":"abd55b6de8526c485a4474bbb563ca19f6fc2bde","modified":1463513382799},{"_id":"source/about/index.md","hash":"bba8a4e63040cfb58a5674b4a1f169e14a8ef89f","modified":1461778968016},{"_id":"themes/chan/languages/en.yml","hash":"ff056ed739309f416292809963ffd814ebb0046d","modified":1461777739574},{"_id":"themes/chan/languages/zh-CN.yml","hash":"7a07cdf3017ac6de172d0cbf701bfdf28e237440","modified":1461777739574},{"_id":"themes/chan/languages/zh-TW.yml","hash":"d5735a77524d95df8fbf83b60fea11462e0e3ac4","modified":1461777739574},{"_id":"themes/chan/layout/archive.ejs","hash":"4246f424f472f7f93f6a88335946fd50d2852f93","modified":1461777739578},{"_id":"themes/chan/layout/category.ejs","hash":"94a70f68fbdf7f034630c5fb74b48379b4b6fbe8","modified":1461777739578},{"_id":"themes/chan/layout/index.ejs","hash":"4246f424f472f7f93f6a88335946fd50d2852f93","modified":1461777739578},{"_id":"themes/chan/layout/layout.ejs","hash":"b688becfbb667d4cfea10d9db1ae7d4377fa86e2","modified":1461777739578},{"_id":"themes/chan/scripts/photoswipe.js","hash":"4632b28f58f661716a0633b556a55c05b49326a3","modified":1461777739586},{"_id":"themes/chan/layout/post.ejs","hash":"ab1195b02ca5b46e85be889bf61f69a416797256","modified":1461777739578},{"_id":"themes/chan/layout/tag.ejs","hash":"ba57de56c466135e7af2b9104167a6d35a11dbfc","modified":1461777739578},{"_id":"source/_posts/01-28-extension-methods-overlap-with-linq.md","hash":"d24b7b8feed6384553d26e8dd94a7de4b9c5608a","modified":1461784784806},{"_id":"themes/chan/layout/_partials/article.ejs","hash":"d8c45608463740ec3b994cea5fd204a3fef15f64","modified":1461777739574},{"_id":"themes/chan/layout/_partials/baidu-statistics.ejs","hash":"8259fd61da7243306104eb57c817d93393000c88","modified":1461777739574},{"_id":"themes/chan/layout/_partials/footer.ejs","hash":"015e10a152a216c33798b62ee446159c94efaa1f","modified":1461777739574},{"_id":"themes/chan/layout/_partials/google-analytics.ejs","hash":"670da0c3a848325c564bc481add948538388b919","modified":1461777739574},{"_id":"themes/chan/layout/_partials/head.ejs","hash":"16588883a53e7a4ac4124d54c29764febc2b97d8","modified":1461777739574},{"_id":"themes/chan/layout/_partials/pagination.ejs","hash":"3439257af42205e46f024619811e86636b4f8a8c","modified":1461777739574},{"_id":"themes/chan/layout/_partials/mobile-header.ejs","hash":"81f18bc01bc23ae3077115a62cbc7922ecab3910","modified":1461777739574},{"_id":"themes/chan/layout/_partials/photoswipe.ejs","hash":"881109633b8b3bd1bf98ed69e2bda916cc1d5422","modified":1461777739578},{"_id":"themes/chan/layout/_partials/post-list.ejs","hash":"9c38cea0a45d4a884fb7a461ccc5803502b5c222","modified":1461777739578},{"_id":"themes/chan/layout/_partials/sidebar.ejs","hash":"0a3a2e6570935480c9e4efd7b031f1a820f41ecc","modified":1461779175609},{"_id":"themes/chan/layout/_partials/scripts.ejs","hash":"4e6844a0ff610fc1571ae8471985168ab0f7bac5","modified":1461777739578},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.js","hash":"724162c14e5722a2ce1f44cf086dcea7b6855b80","modified":1461777739590},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.min.js","hash":"38557bef17c33e172bc8e1670cd302d91622dfad","modified":1461777739590},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.css","hash":"309be6861bc1384fbc016110bb083de648505fe4","modified":1461777739590},{"_id":"themes/chan/source/scripts/main.js","hash":"7bf49377a68ad7579e25e4b11edcfadef33c6f82","modified":1461777739598},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.min.js","hash":"e3267f5ae23f00c1ae052d019f12787296e34afc","modified":1461777739594},{"_id":"themes/chan/source/styles/archive.styl","hash":"f80263048bc15e95e080e648b3db4dae96fbf8d8","modified":1461777739598},{"_id":"themes/chan/source/styles/article.styl","hash":"c25e89d53c0d085c8bd4f0941f8f737a8ddc417a","modified":1461777739598},{"_id":"themes/chan/source/styles/footer.styl","hash":"77333fa5ccd823bb3513b34d4a38f0f4d849ce99","modified":1461777739598},{"_id":"themes/chan/source/styles/highlight.styl","hash":"b3a10c1a565ceeb6f33e0b0992b99b91c6e8f963","modified":1461777739598},{"_id":"themes/chan/source/styles/main.styl","hash":"e48ed4bb3bd5b26915d84594d032ab1f4aacdb9e","modified":1461777739602},{"_id":"themes/chan/source/styles/layout.styl","hash":"35570f3d4f16d1f43c2bb3b0b79cba8456d72531","modified":1461777739598},{"_id":"themes/chan/source/styles/monochrome.styl","hash":"f5fba2261c289f75c45c2bd4bf7e8af1f3af736f","modified":1461777739602},{"_id":"themes/chan/source/styles/mobile-header.styl","hash":"13887d8dec38ee4b0dd50691734e9688c5886222","modified":1461777739602},{"_id":"themes/chan/source/styles/post-list.styl","hash":"c2b3898d76a5fde351b73cbedccb7b9b8da88682","modified":1461777739602},{"_id":"themes/chan/source/styles/pagination.styl","hash":"f16a40d927b8e2228b502cbdc83725b298b257e4","modified":1461777739602},{"_id":"themes/chan/source/styles/sidebar.styl","hash":"5e9f9c594ebb26f0a4816ac253ffb07e796421fb","modified":1461777739602},{"_id":"themes/chan/source/styles/third-party.styl","hash":"d07ebecfcfb975996e32507d116a6ce5ac14fd48","modified":1461777739602},{"_id":"themes/chan/source/styles/variables.styl","hash":"dac6ff5e31cb53fbef98ee618cf3c358a30fea69","modified":1461777739602},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.js","hash":"ff9e3cc58b44a61144a9e211503755b170c24e91","modified":1461777739590},{"_id":"themes/chan/layout/_partials/post/category.ejs","hash":"0dd312b49bcb5638e262d5f0d36da3281c599586","modified":1461777739578},{"_id":"themes/chan/layout/_partials/post/cc.ejs","hash":"2364f1c6215f0feac1dd959658f4523fe41982e2","modified":1461777739578},{"_id":"themes/chan/layout/_partials/post/date.ejs","hash":"f4a2dc30040b8218e08d66a55ddf58ef4d343cc1","modified":1461777739578},{"_id":"themes/chan/layout/_partials/post/disqus.ejs","hash":"337e35c5696f1b868a918bc34244f929a1b895e6","modified":1461777739578},{"_id":"themes/chan/layout/_partials/post/duoshuo.ejs","hash":"1452304e321a77d35df2b06e193e5e59c4d81243","modified":1461777739578},{"_id":"themes/chan/layout/_partials/post/gallery.ejs","hash":"01341c85be08a7fbbaf1555289addcb246190439","modified":1461777739578},{"_id":"themes/chan/layout/_partials/post/jiathis.ejs","hash":"a71dab764822fec0ec38eea3fda6c4fac99e51b4","modified":1461777739578},{"_id":"themes/chan/layout/_partials/post/tag.ejs","hash":"91d25a73e4a7bc17da5d575f5a37ee2cc4544cbe","modified":1461777739578},{"_id":"themes/chan/layout/_partials/post/title.ejs","hash":"bd3ccb7d046d7c843dddc5e74d839b3792f6beaf","modified":1461777739578},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.css","hash":"91f44576a5f5ccff4740ff5020656bd2f00ca13c","modified":1461777739586},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1461777739586},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1461777739586},{"_id":"themes/chan/source/PhotoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1461777739586},{"_id":"themes/chan/source/images/cc/by.png","hash":"fefd720ccfcfbc2b7b15fa56b0ff7e347855aeef","modified":1461777739594},{"_id":"themes/chan/source/images/cc/cc.png","hash":"f7b3311d99cf99c94a8d4e7fdfe3708988fa20eb","modified":1461777739594},{"_id":"themes/chan/source/images/cc/nc.png","hash":"93e68e51a4416092c5b2a313da706caf68113c64","modified":1461777739594},{"_id":"themes/chan/source/images/cc/nd.png","hash":"255699dc771a311b4f3646b88f9c3089420429ca","modified":1461777739594},{"_id":"themes/chan/source/images/cc/sa.png","hash":"917c361ce9ee4b8d88c5b22c2b775eff7d25e92e","modified":1461777739594},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.css","hash":"3839383a67dbff2cf1efab60cc08b70517eda4fc","modified":1461777739594},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.min.css","hash":"d27d8a642a0cf0377d9abdd08858fae9a0fed6e8","modified":1461777739594},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.jquery.js","hash":"6c648a786548d8ec9f4879d23095ce501e850350","modified":1461777739598},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.js","hash":"18a4fd1e09cac9aa351131a38c59b4dba78be084","modified":1461777739598},{"_id":"themes/chan/source/styles/libs/normalize.styl","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1461777739598},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","hash":"de9735bbe28f4999e3e83698720b4989f80143a0","modified":1461777739594},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.min.js","hash":"9e33e23e57821cb4763c0cb4fb3b6870b3de11eb","modified":1461777739594},{"_id":"public/atom.xml","hash":"614c97adebb357146245ea14aad83601d1d2e4ba","modified":1463598488087},{"_id":"public/post-sitemap.xml","hash":"ac630d6d5a9da140878a6e241d71645591957ac6","modified":1463598488094},{"_id":"public/page-sitemap.xml","hash":"f7d34bad0c5e624205749b4179d03edd70640af7","modified":1463598488095},{"_id":"public/tag-sitemap.xml","hash":"59f62e518317f2dbf3596ad091766e89271af660","modified":1463598488095},{"_id":"public/sitemap.xsl","hash":"1240a5e3a9ed1e1f6467ef64319cb09b6680f5f3","modified":1463598488095},{"_id":"public/sitemap.xml","hash":"56f62c2595a888e08a59fb9dacc04b4621aa7ed8","modified":1463598488095},{"_id":"public/about/index.html","hash":"3fba7f1b5556d6aaba3497d53a25eb927ba86fd6","modified":1463598488157},{"_id":"public/2016/03/02/03-02-unit-test-cheatsheet/index.html","hash":"31b00475498cce422a801485971716547222ec4b","modified":1463598488158},{"_id":"public/2016/05/17/04-17-ubuntu-not-turning-off-or-restartingmd/index.html","hash":"788d5c1f073b86b2aedd32ea07e09422c57cfed1","modified":1463598488159},{"_id":"public/2016/02/05/02-05-meteor-flowRouter/index.html","hash":"a5f6732b387b9fb0d7fc4126f71a366e3f97b795","modified":1463598488159},{"_id":"public/2016/02/04/02-04-meteor-session-variables/index.html","hash":"e882cd2daddfbd42f09f900a015276aef25f71a3","modified":1463598488159},{"_id":"public/2016/02/04/02-04-csharp-path-combine/index.html","hash":"a60aa53a83bb37c2da4ecf1f46c2621e7786a3f8","modified":1463598488159},{"_id":"public/2016/02/01/02-01-vnext-sonarqube-integration/index.html","hash":"774b5419ad5b440c782230b00a66e6fa6eacae21","modified":1463598488159},{"_id":"public/2016/01/29/01-29-csharp-path-to-system-folders/index.html","hash":"12f8402c6351b37a0ce8a23336ffc113dd372d8c","modified":1463598488159},{"_id":"public/2016/01/29/01-29-git-branches-tags-and-commits/index.html","hash":"6af29198deff9a99b7ef26c915429678de7554c0","modified":1463598488159},{"_id":"public/2016/01/28/01-28-extension-methods-overlap-with-linq/index.html","hash":"ec655d009678a3dd48ca36ba0a10e852ac7a34c7","modified":1463598488159},{"_id":"public/2016/01/27/01-27-meteor-the-beginning/index.html","hash":"eac7c4c228c6834fa4c208019b81224bd5ef834e","modified":1463598488159},{"_id":"public/2016/01/26/01-26-gitbook-the-beginning/index.html","hash":"b39c9affa901db3f9b89f86d44bb8752c5e21a4a","modified":1463598488159},{"_id":"public/2016/02/03/02-03-meteor-query-subdocument/index.html","hash":"48d069e62a64dd5db29a758beb368dc2ef814c7d","modified":1463598488159},{"_id":"public/2016/01/27/01-27-interface-with-extension-methods/index.html","hash":"ed848ed7654d7cd96a4167e5d0c0023dbf9f3be9","modified":1463598488160},{"_id":"public/2016/01/26/01-26-c-sharp-complex-constructors/index.html","hash":"ebcd542c047ee3d9d1cc3c29be90c554c0bd2b7b","modified":1463598488160},{"_id":"public/archives/index.html","hash":"af9368f578906a10e9f7b006a0c2241f9e8c10f1","modified":1463598488160},{"_id":"public/archives/2016/index.html","hash":"f47731d957a6c5ed8c00ba5eacf1d72ab4ebef78","modified":1463598488160},{"_id":"public/archives/2016/02/index.html","hash":"151ef64c9b96e641c8fefc015b893b0e7a887c53","modified":1463598488160},{"_id":"public/archives/2016/01/index.html","hash":"cd7853af61aca3562acaa90968d5db61b7ac9932","modified":1463598488160},{"_id":"public/archives/page/2/index.html","hash":"80793bfd4508f01a23e35d39d986956d44a69122","modified":1463598488160},{"_id":"public/index.html","hash":"ec96d1b4640cf12a24f5c27db90eab4e959c6637","modified":1463598488160},{"_id":"public/2016/05/17/04-18-sonarqube-update-when-ldapmd/index.html","hash":"851ba2e4959878431aec999e94f35c2233e817c7","modified":1463598488169},{"_id":"public/archives/2016/03/index.html","hash":"b721652ec3ad5e45a863499a6774b8da3670b1c5","modified":1463598488169},{"_id":"public/archives/2016/05/index.html","hash":"59c84af83ff0412b81ea5d01d15b681dd08538ea","modified":1463598488169},{"_id":"public/archives/2016/page/2/index.html","hash":"67ae70f4eac018cd7f7bd19233ee5c7b9524b174","modified":1463598488169},{"_id":"public/page/2/index.html","hash":"1f04c3b81d371fb8125c763ef986c9eb1d2da627","modified":1463598488169},{"_id":"public/tags/daily-learn/index.html","hash":"7d68585b8deae1f811971cfbe90097b1e55cd3d1","modified":1463598488169},{"_id":"public/tags/daily-learn/page/2/index.html","hash":"d5c3b664c18ce211ea745398d445057c81324f14","modified":1463598488169},{"_id":"public/tags/daily-learn-sonarqube-LDAP/index.html","hash":"6aaeaefa3dda18ace8bbb46fcd292229250d98d8","modified":1463598488172},{"_id":"public/Resources/sonarqube1.PNG","hash":"b52381de51456c9bff415ac19e6e89155d03d212","modified":1463598488172},{"_id":"public/Resources/sonarqube2.PNG","hash":"ea158188784e6b07b995465d386fd88eb6cb9fcb","modified":1463598488172},{"_id":"public/PhotoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1463598488172},{"_id":"public/PhotoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1463598488172},{"_id":"public/PhotoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1463598488173},{"_id":"public/images/cc/by.png","hash":"fefd720ccfcfbc2b7b15fa56b0ff7e347855aeef","modified":1463598488173},{"_id":"public/images/cc/sa.png","hash":"917c361ce9ee4b8d88c5b22c2b775eff7d25e92e","modified":1463598488173},{"_id":"public/images/cc/cc.png","hash":"f7b3311d99cf99c94a8d4e7fdfe3708988fa20eb","modified":1463598488173},{"_id":"public/images/cc/nd.png","hash":"255699dc771a311b4f3646b88f9c3089420429ca","modified":1463598488173},{"_id":"public/images/cc/nc.png","hash":"93e68e51a4416092c5b2a313da706caf68113c64","modified":1463598488173},{"_id":"public/styles/highlight.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463598488765},{"_id":"public/PhotoSwipe/photoswipe-ui-default.min.js","hash":"38557bef17c33e172bc8e1670cd302d91622dfad","modified":1463598488765},{"_id":"public/PhotoSwipe/photoswipe.css","hash":"309be6861bc1384fbc016110bb083de648505fe4","modified":1463598488765},{"_id":"public/styles/archive.css","hash":"6d90bd0c59586ef63dd9e9e10bfa0144c0c442fa","modified":1463598488765},{"_id":"public/scripts/main.js","hash":"7bf49377a68ad7579e25e4b11edcfadef33c6f82","modified":1463598488765},{"_id":"public/styles/article.css","hash":"13a8f27b35d45596d80ef20108f8d26894b6badb","modified":1463598488765},{"_id":"public/styles/layout.css","hash":"9728fea8ee073f20644febba5ba0c148ff150d33","modified":1463598488765},{"_id":"public/styles/monochrome.css","hash":"ae4f10d109c4cef388c0a830e9417a545e25b66c","modified":1463598488765},{"_id":"public/styles/mobile-header.css","hash":"ff2b5e6dc153bc815d6093654a9deb2ac2133afa","modified":1463598488765},{"_id":"public/styles/post-list.css","hash":"021c1389e9b9d7870f09ef31afbed9b9ba3b99f9","modified":1463598488765},{"_id":"public/styles/pagination.css","hash":"3552f98652f229a6caec8d9fc4ba48c7ae06da64","modified":1463598488765},{"_id":"public/styles/sidebar.css","hash":"15baefb48b657f37089018219402775f9131375e","modified":1463598488766},{"_id":"public/styles/third-party.css","hash":"3e8947eb8837416acaf18a1dc1c74279bf84a23b","modified":1463598488766},{"_id":"public/styles/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463598488766},{"_id":"public/styles/footer.css","hash":"2d2c9f437c0578e213b5e51f084df0bbb84914f9","modified":1463598488766},{"_id":"public/PhotoSwipe/default-skin/default-skin.css","hash":"91f44576a5f5ccff4740ff5020656bd2f00ca13c","modified":1463598488766},{"_id":"public/perfect-scrollbar/css/perfect-scrollbar.css","hash":"3839383a67dbff2cf1efab60cc08b70517eda4fc","modified":1463598488766},{"_id":"public/perfect-scrollbar/css/perfect-scrollbar.min.css","hash":"d27d8a642a0cf0377d9abdd08858fae9a0fed6e8","modified":1463598488766},{"_id":"public/styles/libs/normalize.css","hash":"d688e75d0b2127cb6529c6cd16a6fb28ffdd8ff0","modified":1463598488766},{"_id":"public/PhotoSwipe/photoswipe-ui-default.js","hash":"724162c14e5722a2ce1f44cf086dcea7b6855b80","modified":1463598488766},{"_id":"public/PhotoSwipe/photoswipe.min.js","hash":"e3267f5ae23f00c1ae052d019f12787296e34afc","modified":1463598488766},{"_id":"public/styles/main.css","hash":"679f2f3f349e0260420c822db89918665514fe19","modified":1463598488766},{"_id":"public/PhotoSwipe/photoswipe.js","hash":"ff9e3cc58b44a61144a9e211503755b170c24e91","modified":1463598488766},{"_id":"public/perfect-scrollbar/js/perfect-scrollbar.jquery.js","hash":"6c648a786548d8ec9f4879d23095ce501e850350","modified":1463598488766},{"_id":"public/perfect-scrollbar/js/perfect-scrollbar.js","hash":"18a4fd1e09cac9aa351131a38c59b4dba78be084","modified":1463598488766},{"_id":"public/perfect-scrollbar/js/min/perfect-scrollbar.min.js","hash":"9e33e23e57821cb4763c0cb4fb3b6870b3de11eb","modified":1463598488766},{"_id":"public/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","hash":"de9735bbe28f4999e3e83698720b4989f80143a0","modified":1463598488766}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2016-04-27T17:42:47.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-04-27 19:42:47\n---\n","updated":"2016-04-27T17:42:48.016Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciod8r0i40001c0wl0ol4boxl","content":"","excerpt":"","more":""}],"Post":[{"title":"Gitbook - The beginning","date":"2016-01-26T19:22:36.000Z","_content":"\nSo i have started writing using GitBook, to take notes of what i learn every day. a few things have shown up.\n1. There are some required files if you start from a GitHub repository that you will have to create:\n    * README.md\n    * SUMMARY.md\n2. Markdown is partially working as per escape characters don't work with # and numbering and listing get confused if they are.\n","source":"_posts/01-26-gitbook-the-beginning.md","raw":"---\ntitle: Gitbook - The beginning\ndate: 2016-01-26 20:22:36\ntags: daily, learn\n---\n\nSo i have started writing using GitBook, to take notes of what i learn every day. a few things have shown up.\n1. There are some required files if you start from a GitHub repository that you will have to create:\n    * README.md\n    * SUMMARY.md\n2. Markdown is partially working as per escape characters don't work with # and numbering and listing get confused if they are.\n","slug":"01-26-gitbook-the-beginning","published":1,"updated":"2016-04-27T19:01:18.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0hy0000c0wl3mnhno09","content":"<p>So i have started writing using GitBook, to take notes of what i learn every day. a few things have shown up.</p>\n<ol>\n<li>There are some required files if you start from a GitHub repository that you will have to create:<ul>\n<li>README.md</li>\n<li>SUMMARY.md</li>\n</ul>\n</li>\n<li>Markdown is partially working as per escape characters don’t work with # and numbering and listing get confused if they are.</li>\n</ol>\n","excerpt":"","more":"<p>So i have started writing using GitBook, to take notes of what i learn every day. a few things have shown up.</p>\n<ol>\n<li>There are some required files if you start from a GitHub repository that you will have to create:<ul>\n<li>README.md</li>\n<li>SUMMARY.md</li>\n</ul>\n</li>\n<li>Markdown is partially working as per escape characters don’t work with # and numbering and listing get confused if they are.</li>\n</ol>\n"},{"title":"Coding - C# - Complex Constructors","date":"2016-01-26T19:22:36.000Z","_content":"\nWhen doing complex objects using an object to help the building is welcome.\n```csharp\npublic class Complex\n{\n    double x;\n    double y;\n    double z;\n\n    float height;\n    float width;\n\n    string foreground;\n    string background;\n\n    public Complex()\n    {\n        x = 1.456;\n        y = 1.234;\n        z = 1.789;\n\n        height = 10.12;\n        width = 10.14;\n\n        foreground = \"#FFF\";\n        background = \"#FA1\";\n    }\n\n}\n```\nIn this way you remove some complexity of just adding steps in your constructor to something more abstract and can contain the logic.\n\n```csharp\npublic class Complex\n{\n    public double X { get; set; }\n    public double Y { get; set; }\n    public double Z { get; set; }\n\n    public double Height { get; set; }\n    public double Width { get; set; }\n\n    public string Foreground { get; set; }\n    public string Background { get; set; }\n\n    public Complex(ComplexBuildHelper buildHelper)\n    {\n        buildHelper.Construct(this);\n    }\n\n}\n\npublic class ComplexBuildHelper\n{\n    public void Construct(Complex reference)\n    {\n        BuildPosition(reference);\n        BuildDimension(reference);\n        BuildCharacteristics(reference);\n    }\n\n    private void BuildPosition(Complex reference)\n    {\n        reference.X = 1.456;\n        reference.Y = 1.234;\n        reference.Z = 1.789;\n    }\n\n    private void BuildDimension(Complex reference)\n    {\n        reference.Height = 10.12;\n        reference.Width = 10.14;\n    }\n\n    private void BuildCharacteristics(Complex reference)\n    {\n        reference.Foreground = \"#FFF\";\n        reference.Background = \"#FA1\";\n    }\n}\n```\n","source":"_posts/01-26-c-sharp-complex-constructors.md","raw":"---\ntitle: Coding - C# - Complex Constructors\ndate: 2016-01-26 20:22:36\ntags: daily, learn\n---\n\nWhen doing complex objects using an object to help the building is welcome.\n```csharp\npublic class Complex\n{\n    double x;\n    double y;\n    double z;\n\n    float height;\n    float width;\n\n    string foreground;\n    string background;\n\n    public Complex()\n    {\n        x = 1.456;\n        y = 1.234;\n        z = 1.789;\n\n        height = 10.12;\n        width = 10.14;\n\n        foreground = \"#FFF\";\n        background = \"#FA1\";\n    }\n\n}\n```\nIn this way you remove some complexity of just adding steps in your constructor to something more abstract and can contain the logic.\n\n```csharp\npublic class Complex\n{\n    public double X { get; set; }\n    public double Y { get; set; }\n    public double Z { get; set; }\n\n    public double Height { get; set; }\n    public double Width { get; set; }\n\n    public string Foreground { get; set; }\n    public string Background { get; set; }\n\n    public Complex(ComplexBuildHelper buildHelper)\n    {\n        buildHelper.Construct(this);\n    }\n\n}\n\npublic class ComplexBuildHelper\n{\n    public void Construct(Complex reference)\n    {\n        BuildPosition(reference);\n        BuildDimension(reference);\n        BuildCharacteristics(reference);\n    }\n\n    private void BuildPosition(Complex reference)\n    {\n        reference.X = 1.456;\n        reference.Y = 1.234;\n        reference.Z = 1.789;\n    }\n\n    private void BuildDimension(Complex reference)\n    {\n        reference.Height = 10.12;\n        reference.Width = 10.14;\n    }\n\n    private void BuildCharacteristics(Complex reference)\n    {\n        reference.Foreground = \"#FFF\";\n        reference.Background = \"#FA1\";\n    }\n}\n```\n","slug":"01-26-c-sharp-complex-constructors","published":1,"updated":"2016-04-27T19:01:15.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0i50002c0wl1vqw2dhg","content":"<p>When doing complex objects using an object to help the building is welcome.<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Complex</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> z;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> height;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> width;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">string</span> foreground;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> background;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Complex</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">1.456</span>;</span><br><span class=\"line\">        y = <span class=\"number\">1.234</span>;</span><br><span class=\"line\">        z = <span class=\"number\">1.789</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        height = <span class=\"number\">10.12</span>;</span><br><span class=\"line\">        width = <span class=\"number\">10.14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        foreground = <span class=\"string\">\"#FFF\"</span>;</span><br><span class=\"line\">        background = <span class=\"string\">\"#FA1\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In this way you remove some complexity of just adding steps in your constructor to something more abstract and can contain the logic.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Complex</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> X &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Y &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Z &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Height &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Width &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Foreground &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Background &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Complex</span>(<span class=\"params\">ComplexBuildHelper buildHelper</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        buildHelper.Construct(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ComplexBuildHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Construct</span>(<span class=\"params\">Complex reference</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        BuildPosition(reference);</span><br><span class=\"line\">        BuildDimension(reference);</span><br><span class=\"line\">        BuildCharacteristics(reference);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">BuildPosition</span>(<span class=\"params\">Complex reference</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        reference.X = <span class=\"number\">1.456</span>;</span><br><span class=\"line\">        reference.Y = <span class=\"number\">1.234</span>;</span><br><span class=\"line\">        reference.Z = <span class=\"number\">1.789</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">BuildDimension</span>(<span class=\"params\">Complex reference</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        reference.Height = <span class=\"number\">10.12</span>;</span><br><span class=\"line\">        reference.Width = <span class=\"number\">10.14</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">BuildCharacteristics</span>(<span class=\"params\">Complex reference</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        reference.Foreground = <span class=\"string\">\"#FFF\"</span>;</span><br><span class=\"line\">        reference.Background = <span class=\"string\">\"#FA1\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>When doing complex objects using an object to help the building is welcome.<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Complex</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> z;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> height;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> width;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">string</span> foreground;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> background;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Complex</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">1.456</span>;</span><br><span class=\"line\">        y = <span class=\"number\">1.234</span>;</span><br><span class=\"line\">        z = <span class=\"number\">1.789</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        height = <span class=\"number\">10.12</span>;</span><br><span class=\"line\">        width = <span class=\"number\">10.14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        foreground = <span class=\"string\">\"#FFF\"</span>;</span><br><span class=\"line\">        background = <span class=\"string\">\"#FA1\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In this way you remove some complexity of just adding steps in your constructor to something more abstract and can contain the logic.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Complex</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> X &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Y &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Z &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Height &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Width &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Foreground &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Background &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Complex</span>(<span class=\"params\">ComplexBuildHelper buildHelper</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        buildHelper.Construct(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ComplexBuildHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Construct</span>(<span class=\"params\">Complex reference</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        BuildPosition(reference);</span><br><span class=\"line\">        BuildDimension(reference);</span><br><span class=\"line\">        BuildCharacteristics(reference);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">BuildPosition</span>(<span class=\"params\">Complex reference</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        reference.X = <span class=\"number\">1.456</span>;</span><br><span class=\"line\">        reference.Y = <span class=\"number\">1.234</span>;</span><br><span class=\"line\">        reference.Z = <span class=\"number\">1.789</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">BuildDimension</span>(<span class=\"params\">Complex reference</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        reference.Height = <span class=\"number\">10.12</span>;</span><br><span class=\"line\">        reference.Width = <span class=\"number\">10.14</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">BuildCharacteristics</span>(<span class=\"params\">Complex reference</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        reference.Foreground = <span class=\"string\">\"#FFF\"</span>;</span><br><span class=\"line\">        reference.Background = <span class=\"string\">\"#FA1\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"C# - Fluent Interfaces with Extension Methods","date":"2016-01-27T19:22:36.000Z","_content":"\nI have not experiment to much with fluent interfaces. But is something cool especially to make code that is expressive.\n\n```csharp\npublic struct Coordenates\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n        public double Z { get; set; }\n    }\n\n    public static class CoordenatesExtensions\n    {\n\n        public static Coordenates X(this Coordenates coordenates, double value)\n        {\n            coordenates.X = value;\n            return coordenates;\n        }\n\n        public static Coordenates Y(this Coordenates coordenates, double value)\n        {\n            coordenates.Y = value;\n            return coordenates;\n        }\n        public static Coordenates Z(this Coordenates coordenates, double value)\n        {\n            coordenates.Z = value;\n            return coordenates;\n        }\n    }\n\n    public class Points\n    {\n        private Coordenates point;\n        public Points()\n        {\n            point = new Coordenates().X(2.1).Y(2.4).Z(3.2);\n        }\n    }\n```\nalso can be used with some language properties to make it more expressive\n```csharp\npublic static class GeneralExtensions\n{\n    public static T As<T>(this object o) where T : class\n    {\n        return o as T;\n    }\n\n    public static T Cast<T>(this object o)\n    {\n        return (T)o;\n    }\n\n    public static bool Is<T>(this object o)\n    {\n        return o is T;\n    }\n}\n\n```\n","source":"_posts/01-27-interface-with-extension-methods.md","raw":"---\ntitle: C# - Fluent Interfaces with Extension Methods\ndate: 2016-01-27 20:22:36\ntags: daily, learn\n---\n\nI have not experiment to much with fluent interfaces. But is something cool especially to make code that is expressive.\n\n```csharp\npublic struct Coordenates\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n        public double Z { get; set; }\n    }\n\n    public static class CoordenatesExtensions\n    {\n\n        public static Coordenates X(this Coordenates coordenates, double value)\n        {\n            coordenates.X = value;\n            return coordenates;\n        }\n\n        public static Coordenates Y(this Coordenates coordenates, double value)\n        {\n            coordenates.Y = value;\n            return coordenates;\n        }\n        public static Coordenates Z(this Coordenates coordenates, double value)\n        {\n            coordenates.Z = value;\n            return coordenates;\n        }\n    }\n\n    public class Points\n    {\n        private Coordenates point;\n        public Points()\n        {\n            point = new Coordenates().X(2.1).Y(2.4).Z(3.2);\n        }\n    }\n```\nalso can be used with some language properties to make it more expressive\n```csharp\npublic static class GeneralExtensions\n{\n    public static T As<T>(this object o) where T : class\n    {\n        return o as T;\n    }\n\n    public static T Cast<T>(this object o)\n    {\n        return (T)o;\n    }\n\n    public static bool Is<T>(this object o)\n    {\n        return o is T;\n    }\n}\n\n```\n","slug":"01-27-interface-with-extension-methods","published":1,"updated":"2016-04-27T19:04:05.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0ia0004c0wlq8rf0avc","content":"<p>I have not experiment to much with fluent interfaces. But is something cool especially to make code that is expressive.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> Coordenates</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> X &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Y &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Z &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CoordenatesExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Coordenates <span class=\"title\">X</span>(<span class=\"params\"><span class=\"keyword\">this</span> Coordenates coordenates, <span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            coordenates.X = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> coordenates;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Coordenates <span class=\"title\">Y</span>(<span class=\"params\"><span class=\"keyword\">this</span> Coordenates coordenates, <span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            coordenates.Y = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> coordenates;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Coordenates <span class=\"title\">Z</span>(<span class=\"params\"><span class=\"keyword\">this</span> Coordenates coordenates, <span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            coordenates.Z = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> coordenates;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Points</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Coordenates point;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Points</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            point = <span class=\"keyword\">new</span> Coordenates().X(<span class=\"number\">2.1</span>).Y(<span class=\"number\">2.4</span>).Z(<span class=\"number\">3.2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>also can be used with some language properties to make it more expressive<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">GeneralExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T As&lt;T&gt;(<span class=\"keyword\">this</span> <span class=\"keyword\">object</span> o) <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o <span class=\"keyword\">as</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Cast&lt;T&gt;(<span class=\"keyword\">this</span> <span class=\"keyword\">object</span> o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T)o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> Is&lt;T&gt;(<span class=\"keyword\">this</span> <span class=\"keyword\">object</span> o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o <span class=\"keyword\">is</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>I have not experiment to much with fluent interfaces. But is something cool especially to make code that is expressive.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> Coordenates</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> X &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Y &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Z &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CoordenatesExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Coordenates <span class=\"title\">X</span>(<span class=\"params\"><span class=\"keyword\">this</span> Coordenates coordenates, <span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            coordenates.X = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> coordenates;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Coordenates <span class=\"title\">Y</span>(<span class=\"params\"><span class=\"keyword\">this</span> Coordenates coordenates, <span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            coordenates.Y = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> coordenates;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Coordenates <span class=\"title\">Z</span>(<span class=\"params\"><span class=\"keyword\">this</span> Coordenates coordenates, <span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            coordenates.Z = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> coordenates;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Points</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Coordenates point;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Points</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            point = <span class=\"keyword\">new</span> Coordenates().X(<span class=\"number\">2.1</span>).Y(<span class=\"number\">2.4</span>).Z(<span class=\"number\">3.2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>also can be used with some language properties to make it more expressive<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">GeneralExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T As&lt;T&gt;(<span class=\"keyword\">this</span> <span class=\"keyword\">object</span> o) <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o <span class=\"keyword\">as</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Cast&lt;T&gt;(<span class=\"keyword\">this</span> <span class=\"keyword\">object</span> o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T)o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> Is&lt;T&gt;(<span class=\"keyword\">this</span> <span class=\"keyword\">object</span> o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o <span class=\"keyword\">is</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Meteor the beginning","date":"2016-01-27T19:22:36.000Z","_content":"\n##**Documentation**\n\nI found a lot of interesting things in this link, i can setup my view model to a real JavaScript object.\n\nhttps://viewmodel.meteor.com/docs\n\n##**Markdown**\n\nTo add markdown support you will have to add the markdown package:\n\n```\nmeteor add markdown\n```\n\nIf you also want your snippets of code to have some style you will also need to add the highlight.js package:\n\n```\nmeteor add simple:highlight.js\n```\n\n##**AutoForm**\n\nto get a multi-line input you need to make sure you get a textarea. This can be done in the collection definition by:\n```js\nTestSchema = new SimpleSchema({\n    content: {\n        type: String,\n        label: \"Content\",\n        autoform: {\n            rows: 10\n        }\n    }\n});\n```\n","source":"_posts/01-27-meteor-the-beginning.md","raw":"---\ntitle: Meteor the beginning\ndate: 2016-01-27 20:22:36\ntags: daily, learn\n---\n\n##**Documentation**\n\nI found a lot of interesting things in this link, i can setup my view model to a real JavaScript object.\n\nhttps://viewmodel.meteor.com/docs\n\n##**Markdown**\n\nTo add markdown support you will have to add the markdown package:\n\n```\nmeteor add markdown\n```\n\nIf you also want your snippets of code to have some style you will also need to add the highlight.js package:\n\n```\nmeteor add simple:highlight.js\n```\n\n##**AutoForm**\n\nto get a multi-line input you need to make sure you get a textarea. This can be done in the collection definition by:\n```js\nTestSchema = new SimpleSchema({\n    content: {\n        type: String,\n        label: \"Content\",\n        autoform: {\n            rows: 10\n        }\n    }\n});\n```\n","slug":"01-27-meteor-the-beginning","published":1,"updated":"2016-04-27T19:19:14.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0ib0005c0wlg15no331","content":"<p>##<strong>Documentation</strong></p>\n<p>I found a lot of interesting things in this link, i can setup my view model to a real JavaScript object.</p>\n<p><a href=\"https://viewmodel.meteor.com/docs\" target=\"_blank\" rel=\"external\">https://viewmodel.meteor.com/docs</a></p>\n<p>##<strong>Markdown</strong></p>\n<p>To add markdown support you will have to add the markdown package:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add markdown</span><br></pre></td></tr></table></figure>\n<p>If you also want your snippets of code to have some style you will also need to add the highlight.js package:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add simple:highlight.js</span><br></pre></td></tr></table></figure>\n<p>##<strong>AutoForm</strong></p>\n<p>to get a multi-line input you need to make sure you get a textarea. This can be done in the collection definition by:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestSchema = <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        label: <span class=\"string\">\"Content\"</span>,</span><br><span class=\"line\">        autoform: &#123;</span><br><span class=\"line\">            rows: <span class=\"number\">10</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>##<strong>Documentation</strong></p>\n<p>I found a lot of interesting things in this link, i can setup my view model to a real JavaScript object.</p>\n<p><a href=\"https://viewmodel.meteor.com/docs\">https://viewmodel.meteor.com/docs</a></p>\n<p>##<strong>Markdown</strong></p>\n<p>To add markdown support you will have to add the markdown package:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add markdown</span><br></pre></td></tr></table></figure>\n<p>If you also want your snippets of code to have some style you will also need to add the highlight.js package:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add simple:highlight.js</span><br></pre></td></tr></table></figure>\n<p>##<strong>AutoForm</strong></p>\n<p>to get a multi-line input you need to make sure you get a textarea. This can be done in the collection definition by:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestSchema = <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        label: <span class=\"string\">\"Content\"</span>,</span><br><span class=\"line\">        autoform: &#123;</span><br><span class=\"line\">            rows: <span class=\"number\">10</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"C# - Paths to system folders","date":"2016-01-29T19:22:36.000Z","_content":"\nIn the Environment class there is a property called SpecialFolder. This will provide the paths to folders like: Program files, desktop, AppData, etc. The use is the next one:\n\n```csharp\nEnvironment.SpecialFolder.<NameSpecialFolder>\n```\n\nWhere <NameSpecialFolder> is the given name of the folder required, for example the AppData Local folder will be\n\n```csharp\nEnvironment.SpecialFolder.LocalApplicationData\n```\n","source":"_posts/01-29-csharp-path-to-system-folders.md","raw":"---\ntitle: C# - Paths to system folders\ndate: 2016-01-29 20:22:36\ntags: daily, learn\n---\n\nIn the Environment class there is a property called SpecialFolder. This will provide the paths to folders like: Program files, desktop, AppData, etc. The use is the next one:\n\n```csharp\nEnvironment.SpecialFolder.<NameSpecialFolder>\n```\n\nWhere <NameSpecialFolder> is the given name of the folder required, for example the AppData Local folder will be\n\n```csharp\nEnvironment.SpecialFolder.LocalApplicationData\n```\n","slug":"01-29-csharp-path-to-system-folders","published":1,"updated":"2016-04-27T19:20:04.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0ie0007c0wlz23wpnye","content":"<p>In the Environment class there is a property called SpecialFolder. This will provide the paths to folders like: Program files, desktop, AppData, etc. The use is the next one:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Environment.SpecialFolder.&lt;NameSpecialFolder&gt;</span><br></pre></td></tr></table></figure>\n<p>Where <namespecialfolder> is the given name of the folder required, for example the AppData Local folder will be</namespecialfolder></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Environment.SpecialFolder.LocalApplicationData</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>In the Environment class there is a property called SpecialFolder. This will provide the paths to folders like: Program files, desktop, AppData, etc. The use is the next one:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Environment.SpecialFolder.&lt;NameSpecialFolder&gt;</span><br></pre></td></tr></table></figure>\n<p>Where <NameSpecialFolder> is the given name of the folder required, for example the AppData Local folder will be</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Environment.SpecialFolder.LocalApplicationData</span><br></pre></td></tr></table></figure>\n"},{"title":"C# - Paths to system folders","date":"2016-01-29T19:22:36.000Z","_content":"\n##**GIT - Branches, Tags and Commits**\n\nI was concern what will happend with my comments in the case i remove a branch.\n\nIn git Commits are independents of branch's and Tag's. This last two are just pointers to certain commit. Trying to delete a Branch could create unreachable commits but if this are tag they become reachable.\n\nRemoving branches will not remove commits, they will just become unreachable. Unless they are deleted with the git-gc command for example.\n","source":"_posts/01-29-git-branches-tags-and-commits.md","raw":"---\ntitle: C# - Paths to system folders\ndate: 2016-01-29 20:22:36\ntags: daily, learn\n---\n\n##**GIT - Branches, Tags and Commits**\n\nI was concern what will happend with my comments in the case i remove a branch.\n\nIn git Commits are independents of branch's and Tag's. This last two are just pointers to certain commit. Trying to delete a Branch could create unreachable commits but if this are tag they become reachable.\n\nRemoving branches will not remove commits, they will just become unreachable. Unless they are deleted with the git-gc command for example.\n","slug":"01-29-git-branches-tags-and-commits","published":1,"updated":"2016-04-27T19:20:26.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0ig0009c0wl0t005imy","content":"<p>##<strong>GIT - Branches, Tags and Commits</strong></p>\n<p>I was concern what will happend with my comments in the case i remove a branch.</p>\n<p>In git Commits are independents of branch’s and Tag’s. This last two are just pointers to certain commit. Trying to delete a Branch could create unreachable commits but if this are tag they become reachable.</p>\n<p>Removing branches will not remove commits, they will just become unreachable. Unless they are deleted with the git-gc command for example.</p>\n","excerpt":"","more":"<p>##<strong>GIT - Branches, Tags and Commits</strong></p>\n<p>I was concern what will happend with my comments in the case i remove a branch.</p>\n<p>In git Commits are independents of branch’s and Tag’s. This last two are just pointers to certain commit. Trying to delete a Branch could create unreachable commits but if this are tag they become reachable.</p>\n<p>Removing branches will not remove commits, they will just become unreachable. Unless they are deleted with the git-gc command for example.</p>\n"},{"title":"TFS 2015 - vnext and sonarqube integration","date":"2016-02-01T19:22:36.000Z","_content":"\nThe modifications required to use the integrated sonarqube steps are:\n\n1.\tOn your administration panel add a new Generic Endpoint with the connection name you decide and the sonarqube server address.\n![](Resources/sonarqube2.PNG)\n\n2.\tConfigure the start step as per the next image\n    * select the endpoint configured before\n    * Add the project parameters:\n        * key (this is an unique identifier).\n        * Name (display name for your software).\n        * Version (related software version).\n\n![](Resources/sonarqube1.PNG)\n","source":"_posts/02-01-vnext-sonarqube-integration.md","raw":"---\ntitle: TFS 2015 - vnext and sonarqube integration\ndate: 2016-02-01 20:22:36\ntags: daily, learn\n---\n\nThe modifications required to use the integrated sonarqube steps are:\n\n1.\tOn your administration panel add a new Generic Endpoint with the connection name you decide and the sonarqube server address.\n![](Resources/sonarqube2.PNG)\n\n2.\tConfigure the start step as per the next image\n    * select the endpoint configured before\n    * Add the project parameters:\n        * key (this is an unique identifier).\n        * Name (display name for your software).\n        * Version (related software version).\n\n![](Resources/sonarqube1.PNG)\n","slug":"02-01-vnext-sonarqube-integration","published":1,"updated":"2016-04-27T19:22:45.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0il000cc0wlv3sllwc3","content":"<p>The modifications required to use the integrated sonarqube steps are:</p>\n<ol>\n<li><p>On your administration panel add a new Generic Endpoint with the connection name you decide and the sonarqube server address.<br><img src=\"Resources/sonarqube2.PNG\" alt=\"\"></p>\n</li>\n<li><p>Configure the start step as per the next image</p>\n<ul>\n<li>select the endpoint configured before</li>\n<li>Add the project parameters:<ul>\n<li>key (this is an unique identifier).</li>\n<li>Name (display name for your software).</li>\n<li>Version (related software version).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"Resources/sonarqube1.PNG\" alt=\"\"></p>\n","excerpt":"","more":"<p>The modifications required to use the integrated sonarqube steps are:</p>\n<ol>\n<li><p>On your administration panel add a new Generic Endpoint with the connection name you decide and the sonarqube server address.<br><img src=\"Resources/sonarqube2.PNG\" alt=\"\"></p>\n</li>\n<li><p>Configure the start step as per the next image</p>\n<ul>\n<li>select the endpoint configured before</li>\n<li>Add the project parameters:<ul>\n<li>key (this is an unique identifier).</li>\n<li>Name (display name for your software).</li>\n<li>Version (related software version).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"Resources/sonarqube1.PNG\" alt=\"\"></p>\n"},{"title":"Meteor - Query subdocument","date":"2016-02-03T19:22:36.000Z","_content":"\n\nTo make a query over a subdocument in meteor is not posible to use directly the '$' or '$elemMatch' notation. It is necesary to use the keyword 'fields:' to do this. To publish just part of a mongo document you should do a query similar to this:\n\n```javascript\nMeteor.publish('chapter', function(id, name){\n  check(id,String);\n  check(name,String);\n  return Playlists.find({ _id: id }, { fields: { chapters: { $elemMatch: { name: name }}}});\n});\n```\nThat from the original document:\n```json\n{\n  \"_id\": \"cx8cmw5KMjHQm8czw\",\n  \"name\": \"Test\",\n  \"description\": \"this is a test\",\n  \"chapters\": [\n    {\n      \"name\": \"First chapter\",\n      \"description\": \"this is a video about blah blah blah\",\n      \"video\": {\n        \"youtube\": \"yoAFDy1WS94\"\n      }\n    },\n    {\n      \"name\": \"Second chapter\",\n      \"description\": \"this is a video about blah blah blah\",\n      \"video\": {\n        \"youtube\": \"yoAFDy1WS94\"\n      }\n    }\n  ],\n  \"createdAt\": \"2016-02-03T07:18:52.371Z\",\n  \"isPublic\": false\n}\n```\n\nWill return:\n```json\n{\n  \"_id\": \"cx8cmw5KMjHQm8czw\",\n  \"chapters\": [\n    {\n      \"name\": \"First chapter\",\n      \"description\": \"this is a video about blah blah blah\",\n      \"video\": {\n        \"youtube\": \"ldkfkfkdlfjdkf\"\n      }\n    }\n  ]\n}\n\n```\nThis is useful if you have big documents or don't want the complexity of having 2 different collections that need to be related. It will help with the performance and resources that your application uses.\n\nnow if you want to use the sub-document in your UI, you should just subscribe and add a helper to access this array item, like for example:\n```javascript\nTemplate.chapter.onCreated(function(){\n  var self = this;\n  self.autorun(function(){\n    var id = FlowRouter.getParam('id');\n    var name = FlowRouter.getParam('name');\n    self.subscribe('chapter', id, name);\n  });\n});\n\nTemplate.chapter.helpers({\n  chapter: () => {\n      return Playlists.findOne({}).chapters[0];\n    }\n});\n```\n\nFinally your HTML just needs to reference the helper defined to show the information\n```html\n<template name=\"chapter\">\n    <div class=\"chapter-body\">\n        <h3>{{ chapter.name }}</h3>\n        <iframe width=\"560\" height=\"315\" class=\"video\"\n          src=\"https://www.youtube.com/embed/{{ chapter.video.youtube }}\"\n          frameborder=\"0\" allowfullscreen></iframe>\n        {{ #markdown }}{{ chapter.description }}{{ /markdown }}\n    </div>\n</template>\n```\n","source":"_posts/02-03-meteor-query-subdocument.md","raw":"---\ntitle: Meteor - Query subdocument\ndate: 2016-02-03 20:22:36\ntags: daily, learn\n---\n\n\nTo make a query over a subdocument in meteor is not posible to use directly the '$' or '$elemMatch' notation. It is necesary to use the keyword 'fields:' to do this. To publish just part of a mongo document you should do a query similar to this:\n\n```javascript\nMeteor.publish('chapter', function(id, name){\n  check(id,String);\n  check(name,String);\n  return Playlists.find({ _id: id }, { fields: { chapters: { $elemMatch: { name: name }}}});\n});\n```\nThat from the original document:\n```json\n{\n  \"_id\": \"cx8cmw5KMjHQm8czw\",\n  \"name\": \"Test\",\n  \"description\": \"this is a test\",\n  \"chapters\": [\n    {\n      \"name\": \"First chapter\",\n      \"description\": \"this is a video about blah blah blah\",\n      \"video\": {\n        \"youtube\": \"yoAFDy1WS94\"\n      }\n    },\n    {\n      \"name\": \"Second chapter\",\n      \"description\": \"this is a video about blah blah blah\",\n      \"video\": {\n        \"youtube\": \"yoAFDy1WS94\"\n      }\n    }\n  ],\n  \"createdAt\": \"2016-02-03T07:18:52.371Z\",\n  \"isPublic\": false\n}\n```\n\nWill return:\n```json\n{\n  \"_id\": \"cx8cmw5KMjHQm8czw\",\n  \"chapters\": [\n    {\n      \"name\": \"First chapter\",\n      \"description\": \"this is a video about blah blah blah\",\n      \"video\": {\n        \"youtube\": \"ldkfkfkdlfjdkf\"\n      }\n    }\n  ]\n}\n\n```\nThis is useful if you have big documents or don't want the complexity of having 2 different collections that need to be related. It will help with the performance and resources that your application uses.\n\nnow if you want to use the sub-document in your UI, you should just subscribe and add a helper to access this array item, like for example:\n```javascript\nTemplate.chapter.onCreated(function(){\n  var self = this;\n  self.autorun(function(){\n    var id = FlowRouter.getParam('id');\n    var name = FlowRouter.getParam('name');\n    self.subscribe('chapter', id, name);\n  });\n});\n\nTemplate.chapter.helpers({\n  chapter: () => {\n      return Playlists.findOne({}).chapters[0];\n    }\n});\n```\n\nFinally your HTML just needs to reference the helper defined to show the information\n```html\n<template name=\"chapter\">\n    <div class=\"chapter-body\">\n        <h3>{{ chapter.name }}</h3>\n        <iframe width=\"560\" height=\"315\" class=\"video\"\n          src=\"https://www.youtube.com/embed/{{ chapter.video.youtube }}\"\n          frameborder=\"0\" allowfullscreen></iframe>\n        {{ #markdown }}{{ chapter.description }}{{ /markdown }}\n    </div>\n</template>\n```\n","slug":"02-03-meteor-query-subdocument","published":1,"updated":"2016-04-28T06:29:41.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0ip000ec0wlglnqad0w","content":"<p>To make a query over a subdocument in meteor is not posible to use directly the ‘$’ or ‘$elemMatch’ notation. It is necesary to use the keyword ‘fields:’ to do this. To publish just part of a mongo document you should do a query similar to this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Meteor.publish(<span class=\"string\">'chapter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, name</span>)</span>&#123;</span><br><span class=\"line\">  check(id,<span class=\"built_in\">String</span>);</span><br><span class=\"line\">  check(name,<span class=\"built_in\">String</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Playlists.find(&#123; _id: id &#125;, &#123; fields: &#123; chapters: &#123; $elemMatch: &#123; name: name &#125;&#125;&#125;&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>That from the original document:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"cx8cmw5KMjHQm8czw\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"this is a test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"chapters\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"First chapter\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"this is a video about blah blah blah\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"video\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"youtube\"</span>: <span class=\"string\">\"yoAFDy1WS94\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Second chapter\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"this is a video about blah blah blah\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"video\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"youtube\"</span>: <span class=\"string\">\"yoAFDy1WS94\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"createdAt\"</span>: <span class=\"string\">\"2016-02-03T07:18:52.371Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"isPublic\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Will return:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"cx8cmw5KMjHQm8czw\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"chapters\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"First chapter\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"this is a video about blah blah blah\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"video\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"youtube\"</span>: <span class=\"string\">\"ldkfkfkdlfjdkf\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This is useful if you have big documents or don’t want the complexity of having 2 different collections that need to be related. It will help with the performance and resources that your application uses.</p>\n<p>now if you want to use the sub-document in your UI, you should just subscribe and add a helper to access this array item, like for example:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Template.chapter.onCreated(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  self.autorun(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = FlowRouter.getParam(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = FlowRouter.getParam(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">    self.subscribe(<span class=\"string\">'chapter'</span>, id, name);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Template.chapter.helpers(&#123;</span><br><span class=\"line\">  chapter: () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Playlists.findOne(&#123;&#125;).chapters[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Finally your HTML just needs to reference the helper defined to show the information<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"chapter\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"chapter-body\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123; chapter.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">width</span>=<span class=\"string\">\"560\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"315\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"video\"</span></span><br><span class=\"line\">          <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.youtube.com/embed/&#123;&#123; chapter.video.youtube &#125;&#125;\"</span></span><br><span class=\"line\">          <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">allowfullscreen</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; #markdown &#125;&#125;&#123;&#123; chapter.description &#125;&#125;&#123;&#123; /markdown &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>To make a query over a subdocument in meteor is not posible to use directly the ‘$’ or ‘$elemMatch’ notation. It is necesary to use the keyword ‘fields:’ to do this. To publish just part of a mongo document you should do a query similar to this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Meteor.publish(<span class=\"string\">'chapter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, name</span>)</span>&#123;</span><br><span class=\"line\">  check(id,<span class=\"built_in\">String</span>);</span><br><span class=\"line\">  check(name,<span class=\"built_in\">String</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Playlists.find(&#123; _id: id &#125;, &#123; fields: &#123; chapters: &#123; $elemMatch: &#123; name: name &#125;&#125;&#125;&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>That from the original document:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"cx8cmw5KMjHQm8czw\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"this is a test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"chapters\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"First chapter\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"this is a video about blah blah blah\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"video\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"youtube\"</span>: <span class=\"string\">\"yoAFDy1WS94\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Second chapter\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"this is a video about blah blah blah\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"video\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"youtube\"</span>: <span class=\"string\">\"yoAFDy1WS94\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"createdAt\"</span>: <span class=\"string\">\"2016-02-03T07:18:52.371Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"isPublic\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Will return:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"cx8cmw5KMjHQm8czw\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"chapters\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"First chapter\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"this is a video about blah blah blah\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"video\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"youtube\"</span>: <span class=\"string\">\"ldkfkfkdlfjdkf\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This is useful if you have big documents or don’t want the complexity of having 2 different collections that need to be related. It will help with the performance and resources that your application uses.</p>\n<p>now if you want to use the sub-document in your UI, you should just subscribe and add a helper to access this array item, like for example:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Template.chapter.onCreated(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  self.autorun(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = FlowRouter.getParam(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = FlowRouter.getParam(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">    self.subscribe(<span class=\"string\">'chapter'</span>, id, name);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Template.chapter.helpers(&#123;</span><br><span class=\"line\">  chapter: () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Playlists.findOne(&#123;&#125;).chapters[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Finally your HTML just needs to reference the helper defined to show the information<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"chapter\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"chapter-body\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123; chapter.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">width</span>=<span class=\"string\">\"560\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"315\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"video\"</span></span><br><span class=\"line\">          <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.youtube.com/embed/&#123;&#123; chapter.video.youtube &#125;&#125;\"</span></span><br><span class=\"line\">          <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">allowfullscreen</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; #markdown &#125;&#125;&#123;&#123; chapter.description &#125;&#125;&#123;&#123; /markdown &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"C# - Path.Combine","date":"2016-02-04T19:22:36.000Z","_content":"\nWhen using path.Combine if the second argument starts with a /. the first path is ignored and will give a path based on the C: drive.\n```csharp\nvar path = Path.Combine(firstpath,$@\"\\myfolder\\myfile.txt\");\n```\n\nwill not return <firstpath\\myfolder\\myfile.txt> will return <C:\\\\\\myfolder\\myfile.txt>.\n\n## **Meteor - Session variables**\n\nSession variables are easy to use in meteor. the can ve get and set from the javascript code using:\n\n```javascript\nSession.get('variableName');\nSession.set('variableName', true);\n```\n\non your HTML you can reference the get method easily by:\n```HTML\n<template name=\"admin\">\n    {{#if $.Session.get 'variableName'}}\n        I am here\n    {{else}}\n        I am not here\n    {{/if}}\n</template>\n```\n","source":"_posts/02-04-csharp-path-combine.md","raw":"---\ntitle: C# - Path.Combine\ndate: 2016-02-04 20:22:36\ntags: daily, learn\n---\n\nWhen using path.Combine if the second argument starts with a /. the first path is ignored and will give a path based on the C: drive.\n```csharp\nvar path = Path.Combine(firstpath,$@\"\\myfolder\\myfile.txt\");\n```\n\nwill not return <firstpath\\myfolder\\myfile.txt> will return <C:\\\\\\myfolder\\myfile.txt>.\n\n## **Meteor - Session variables**\n\nSession variables are easy to use in meteor. the can ve get and set from the javascript code using:\n\n```javascript\nSession.get('variableName');\nSession.set('variableName', true);\n```\n\non your HTML you can reference the get method easily by:\n```HTML\n<template name=\"admin\">\n    {{#if $.Session.get 'variableName'}}\n        I am here\n    {{else}}\n        I am not here\n    {{/if}}\n</template>\n```\n","slug":"02-04-csharp-path-combine","published":1,"updated":"2016-04-28T06:28:32.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0is000gc0wlzdhcv87w","content":"<p>When using path.Combine if the second argument starts with a /. the first path is ignored and will give a path based on the C: drive.<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = Path.Combine(firstpath,$<span class=\"string\">@\"\\myfolder\\myfile.txt\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>will not return <firstpath\\myfolder\\myfile.txt> will return <c:\\\\\\myfolder\\myfile.txt>.</c:\\\\\\myfolder\\myfile.txt></firstpath\\myfolder\\myfile.txt></p>\n<h2 id=\"Meteor-Session-variables\"><a href=\"#Meteor-Session-variables\" class=\"headerlink\" title=\"Meteor - Session variables\"></a><strong>Meteor - Session variables</strong></h2><p>Session variables are easy to use in meteor. the can ve get and set from the javascript code using:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session.get(<span class=\"string\">'variableName'</span>);</span><br><span class=\"line\">Session.set(<span class=\"string\">'variableName'</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>on your HTML you can reference the get method easily by:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;#if $.Session.get 'variableName'&#125;&#125;</span><br><span class=\"line\">        I am here</span><br><span class=\"line\">    &#123;&#123;else&#125;&#125;</span><br><span class=\"line\">        I am not here</span><br><span class=\"line\">    &#123;&#123;/if&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>When using path.Combine if the second argument starts with a /. the first path is ignored and will give a path based on the C: drive.<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = Path.Combine(firstpath,$<span class=\"string\">@\"\\myfolder\\myfile.txt\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>will not return <firstpath\\myfolder\\myfile.txt> will return <C:\\\\\\myfolder\\myfile.txt>.</p>\n<h2 id=\"Meteor-Session-variables\"><a href=\"#Meteor-Session-variables\" class=\"headerlink\" title=\"Meteor - Session variables\"></a><strong>Meteor - Session variables</strong></h2><p>Session variables are easy to use in meteor. the can ve get and set from the javascript code using:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session.get(<span class=\"string\">'variableName'</span>);</span><br><span class=\"line\">Session.set(<span class=\"string\">'variableName'</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>on your HTML you can reference the get method easily by:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;#if $.Session.get 'variableName'&#125;&#125;</span><br><span class=\"line\">        I am here</span><br><span class=\"line\">    &#123;&#123;else&#125;&#125;</span><br><span class=\"line\">        I am not here</span><br><span class=\"line\">    &#123;&#123;/if&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"Meteor - Session variables","date":"2016-02-04T19:22:36.000Z","_content":"\nSession variables are easy to use in meteor. the can ve get and set from the javascript code using:\n\n```javascript\nSession.get('variableName');\nSession.set('variableName', true);\n```\n\non your HTML you can reference the get method easily by:\n```HTML\n<template name=\"admin\">\n    {{#if $.Session.get 'variableName'}}\n        I am here\n    {{else}}\n        I am not here\n    {{/if}}\n</template>\n```\n","source":"_posts/02-04-meteor-session-variables.md","raw":"---\ntitle: Meteor - Session variables\ndate: 2016-02-04 20:22:36\ntags: daily, learn\n---\n\nSession variables are easy to use in meteor. the can ve get and set from the javascript code using:\n\n```javascript\nSession.get('variableName');\nSession.set('variableName', true);\n```\n\non your HTML you can reference the get method easily by:\n```HTML\n<template name=\"admin\">\n    {{#if $.Session.get 'variableName'}}\n        I am here\n    {{else}}\n        I am not here\n    {{/if}}\n</template>\n```\n","slug":"02-04-meteor-session-variables","published":1,"updated":"2016-04-27T19:28:26.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0iu000ic0wl967zz7n3","content":"<p>Session variables are easy to use in meteor. the can ve get and set from the javascript code using:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session.get(<span class=\"string\">'variableName'</span>);</span><br><span class=\"line\">Session.set(<span class=\"string\">'variableName'</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>on your HTML you can reference the get method easily by:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;#if $.Session.get 'variableName'&#125;&#125;</span><br><span class=\"line\">        I am here</span><br><span class=\"line\">    &#123;&#123;else&#125;&#125;</span><br><span class=\"line\">        I am not here</span><br><span class=\"line\">    &#123;&#123;/if&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>Session variables are easy to use in meteor. the can ve get and set from the javascript code using:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session.get(<span class=\"string\">'variableName'</span>);</span><br><span class=\"line\">Session.set(<span class=\"string\">'variableName'</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>on your HTML you can reference the get method easily by:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;#if $.Session.get 'variableName'&#125;&#125;</span><br><span class=\"line\">        I am here</span><br><span class=\"line\">    &#123;&#123;else&#125;&#125;</span><br><span class=\"line\">        I am not here</span><br><span class=\"line\">    &#123;&#123;/if&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"Meteor - FlowRouter","date":"2016-02-05T19:22:36.000Z","_content":"\nThis package is a very useful to define the navigation on your client side application. To add it just use the next command line:\n```\nmeteor add kadira:flow-router\n```\n\na static route can be done as the next code. Where name needs to be a unique identifier, and the render string has to be the name of the template.  \n```javascript\nFlowRouter.route('/',\n{\n  name: 'homeId',\n  action(){\n    BlazeLayout.render('homeTemplate');\n  }\n});\n```\n\nin case of requiring a dynamic page. Where the change is just the second objects where you defined the child template.\n```javascript\nFlowRouter.route('/',\n{\n  name: 'mainId',\n  action(){\n    BlazeLayout.render('mainTemplate', {mainTemplate: 'dynamicTemplate'});\n  }\n});\n```\n\n\n\nOther interesting parts of this package is the definition of variables on the route definition (like :id in the next code).\n```javascript\nFlowRouter.route('/playlist/:id',\n{\n  name: 'playlist',\n  action(){\n    BlazeLayout.render('main', {main: 'playlist'});\n  }\n});\n```\n\nthere is also a possibility to use it in any part of the client javascript code to do redirection by using:\n```javascript\nFlowRouter.go('home');\n```\n","source":"_posts/02-05-meteor-flowRouter.md","raw":"---\ntitle: Meteor - FlowRouter\ndate: 2016-02-05 20:22:36\ntags: daily, learn\n---\n\nThis package is a very useful to define the navigation on your client side application. To add it just use the next command line:\n```\nmeteor add kadira:flow-router\n```\n\na static route can be done as the next code. Where name needs to be a unique identifier, and the render string has to be the name of the template.  \n```javascript\nFlowRouter.route('/',\n{\n  name: 'homeId',\n  action(){\n    BlazeLayout.render('homeTemplate');\n  }\n});\n```\n\nin case of requiring a dynamic page. Where the change is just the second objects where you defined the child template.\n```javascript\nFlowRouter.route('/',\n{\n  name: 'mainId',\n  action(){\n    BlazeLayout.render('mainTemplate', {mainTemplate: 'dynamicTemplate'});\n  }\n});\n```\n\n\n\nOther interesting parts of this package is the definition of variables on the route definition (like :id in the next code).\n```javascript\nFlowRouter.route('/playlist/:id',\n{\n  name: 'playlist',\n  action(){\n    BlazeLayout.render('main', {main: 'playlist'});\n  }\n});\n```\n\nthere is also a possibility to use it in any part of the client javascript code to do redirection by using:\n```javascript\nFlowRouter.go('home');\n```\n","slug":"02-05-meteor-flowRouter","published":1,"updated":"2016-04-27T19:29:04.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0iw000kc0wlii14pu1n","content":"<p>This package is a very useful to define the navigation on your client side application. To add it just use the next command line:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add kadira:flow-router</span><br></pre></td></tr></table></figure></p>\n<p>a static route can be done as the next code. Where name needs to be a unique identifier, and the render string has to be the name of the template.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlowRouter.route(<span class=\"string\">'/'</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'homeId'</span>,</span><br><span class=\"line\">  action()&#123;</span><br><span class=\"line\">    BlazeLayout.render(<span class=\"string\">'homeTemplate'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>in case of requiring a dynamic page. Where the change is just the second objects where you defined the child template.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlowRouter.route(<span class=\"string\">'/'</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'mainId'</span>,</span><br><span class=\"line\">  action()&#123;</span><br><span class=\"line\">    BlazeLayout.render(<span class=\"string\">'mainTemplate'</span>, &#123;mainTemplate: <span class=\"string\">'dynamicTemplate'</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Other interesting parts of this package is the definition of variables on the route definition (like :id in the next code).<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlowRouter.route(<span class=\"string\">'/playlist/:id'</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'playlist'</span>,</span><br><span class=\"line\">  action()&#123;</span><br><span class=\"line\">    BlazeLayout.render(<span class=\"string\">'main'</span>, &#123;main: <span class=\"string\">'playlist'</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>there is also a possibility to use it in any part of the client javascript code to do redirection by using:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlowRouter.go(<span class=\"string\">'home'</span>);</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>This package is a very useful to define the navigation on your client side application. To add it just use the next command line:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add kadira:flow-router</span><br></pre></td></tr></table></figure></p>\n<p>a static route can be done as the next code. Where name needs to be a unique identifier, and the render string has to be the name of the template.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlowRouter.route(<span class=\"string\">'/'</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'homeId'</span>,</span><br><span class=\"line\">  action()&#123;</span><br><span class=\"line\">    BlazeLayout.render(<span class=\"string\">'homeTemplate'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>in case of requiring a dynamic page. Where the change is just the second objects where you defined the child template.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlowRouter.route(<span class=\"string\">'/'</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'mainId'</span>,</span><br><span class=\"line\">  action()&#123;</span><br><span class=\"line\">    BlazeLayout.render(<span class=\"string\">'mainTemplate'</span>, &#123;mainTemplate: <span class=\"string\">'dynamicTemplate'</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Other interesting parts of this package is the definition of variables on the route definition (like :id in the next code).<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlowRouter.route(<span class=\"string\">'/playlist/:id'</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'playlist'</span>,</span><br><span class=\"line\">  action()&#123;</span><br><span class=\"line\">    BlazeLayout.render(<span class=\"string\">'main'</span>, &#123;main: <span class=\"string\">'playlist'</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>there is also a possibility to use it in any part of the client javascript code to do redirection by using:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlowRouter.go(<span class=\"string\">'home'</span>);</span><br></pre></td></tr></table></figure></p>\n"},{"date":"2016-05-17T19:15:00.000Z","title":"Sonarqube Upgrade Error due LDAP","_content":"\nWhile upgrading Sonarqube i am getting the next error message\n\n> An error happened, some parts of the page might not render correctly. Please contact the administrator if you keep on experiencing this error\n\nAs you can see the message is not to explicit, in reality it doesnt have anything to do with reality. In my case i had copy as per the instructions the `sonar.properties` file. after searching i fouund this discussion [post](https://groups.google.com/forum/#!topic/sonarqube/clYmLXuz7Nk). \n\nThe problem at this point became clear, LDAP is a plugin inside Sonarqube. During the upgrade process the plugins must have not been loaded causing an unidentified section in the upgrade.\n\nThe solution is simple:\n1. Comment the LDAP section.\n2. Go through the upgrade process of Sonarqube.\n3. Stop Sonarqube.\n4. Uncomment LDAP section.\n5. Start Sonarqube.\n\n\n\n\n\n\n\n","source":"_posts/04-18-sonarqube-update-when-ldapmd.md","raw":"---\ndate: 2016-05-17 21:15:00\ntags: daily, learn, sonarqube, LDAP\ntitle: Sonarqube Upgrade Error due LDAP\n---\n\nWhile upgrading Sonarqube i am getting the next error message\n\n> An error happened, some parts of the page might not render correctly. Please contact the administrator if you keep on experiencing this error\n\nAs you can see the message is not to explicit, in reality it doesnt have anything to do with reality. In my case i had copy as per the instructions the `sonar.properties` file. after searching i fouund this discussion [post](https://groups.google.com/forum/#!topic/sonarqube/clYmLXuz7Nk). \n\nThe problem at this point became clear, LDAP is a plugin inside Sonarqube. During the upgrade process the plugins must have not been loaded causing an unidentified section in the upgrade.\n\nThe solution is simple:\n1. Comment the LDAP section.\n2. Go through the upgrade process of Sonarqube.\n3. Stop Sonarqube.\n4. Uncomment LDAP section.\n5. Start Sonarqube.\n\n\n\n\n\n\n\n","slug":"04-18-sonarqube-update-when-ldapmd","published":1,"updated":"2016-05-18T19:07:31.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0j0000mc0wlqq3rryhk","content":"<p>While upgrading Sonarqube i am getting the next error message</p>\n<blockquote>\n<p>An error happened, some parts of the page might not render correctly. Please contact the administrator if you keep on experiencing this error</p>\n</blockquote>\n<p>As you can see the message is not to explicit, in reality it doesnt have anything to do with reality. In my case i had copy as per the instructions the <code>sonar.properties</code> file. after searching i fouund this discussion <a href=\"https://groups.google.com/forum/#!topic/sonarqube/clYmLXuz7Nk\" target=\"_blank\" rel=\"external\">post</a>. </p>\n<p>The problem at this point became clear, LDAP is a plugin inside Sonarqube. During the upgrade process the plugins must have not been loaded causing an unidentified section in the upgrade.</p>\n<p>The solution is simple:</p>\n<ol>\n<li>Comment the LDAP section.</li>\n<li>Go through the upgrade process of Sonarqube.</li>\n<li>Stop Sonarqube.</li>\n<li>Uncomment LDAP section.</li>\n<li>Start Sonarqube.</li>\n</ol>\n","excerpt":"","more":"<p>While upgrading Sonarqube i am getting the next error message</p>\n<blockquote>\n<p>An error happened, some parts of the page might not render correctly. Please contact the administrator if you keep on experiencing this error</p>\n</blockquote>\n<p>As you can see the message is not to explicit, in reality it doesnt have anything to do with reality. In my case i had copy as per the instructions the <code>sonar.properties</code> file. after searching i fouund this discussion <a href=\"https://groups.google.com/forum/#!topic/sonarqube/clYmLXuz7Nk\">post</a>. </p>\n<p>The problem at this point became clear, LDAP is a plugin inside Sonarqube. During the upgrade process the plugins must have not been loaded causing an unidentified section in the upgrade.</p>\n<p>The solution is simple:</p>\n<ol>\n<li>Comment the LDAP section.</li>\n<li>Go through the upgrade process of Sonarqube.</li>\n<li>Stop Sonarqube.</li>\n<li>Uncomment LDAP section.</li>\n<li>Start Sonarqube.</li>\n</ol>\n"},{"title":"Unit Test CheatSheet","date":"2016-03-02T19:22:36.000Z","_content":"\n##**mstest**\n\nlinks:\n* [assert](https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.assert.aspx)\n* [collection assert](https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.aspx)\n\n##**Nunit**\n\nlinks:\n* [Attributes](https://github.com/nunit/docs/wiki/Attributes)\n* [Assertion](https://github.com/nunit/docs/wiki/Assertions)\n\n##**MOQ**\nExample\n```cs\npublic interface IFoo {\n   public bool DoSomething(string);\n}\n\nint calls;\nvar mock = new Mock<IFoo>();\nmock.Setup(foo => foo.DoSomething(It.IsAny<string>())).\n         Returns((string s) => s.ToLower())\n         .Callback(() => ++calls);\n\nmock.SetupProperty(f => f.Name, \"foo\");\nmock.VerifySet(foo => foo.Name = \"foo\");\n\nmock.Verify(foo => foo.DoSomething(It.IsAny<string>()), Times.Never());\n```\n\n##**Test internal Classes**\n\nIn assembly info to test internal classes you will need to know the name of the file\n```cs\n[assembly: InternalsVisibleToAttribute(\"<Project Name>\")]\n```\n","source":"_posts/03-02-unit-test-cheatsheet.md","raw":"---\ntitle: Unit Test CheatSheet\ndate: 2016-03-02 20:22:36\ntags: daily, learn\n---\n\n##**mstest**\n\nlinks:\n* [assert](https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.assert.aspx)\n* [collection assert](https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.aspx)\n\n##**Nunit**\n\nlinks:\n* [Attributes](https://github.com/nunit/docs/wiki/Attributes)\n* [Assertion](https://github.com/nunit/docs/wiki/Assertions)\n\n##**MOQ**\nExample\n```cs\npublic interface IFoo {\n   public bool DoSomething(string);\n}\n\nint calls;\nvar mock = new Mock<IFoo>();\nmock.Setup(foo => foo.DoSomething(It.IsAny<string>())).\n         Returns((string s) => s.ToLower())\n         .Callback(() => ++calls);\n\nmock.SetupProperty(f => f.Name, \"foo\");\nmock.VerifySet(foo => foo.Name = \"foo\");\n\nmock.Verify(foo => foo.DoSomething(It.IsAny<string>()), Times.Never());\n```\n\n##**Test internal Classes**\n\nIn assembly info to test internal classes you will need to know the name of the file\n```cs\n[assembly: InternalsVisibleToAttribute(\"<Project Name>\")]\n```\n","slug":"03-02-unit-test-cheatsheet","published":1,"updated":"2016-04-27T19:29:52.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0j3000oc0wljqb4p7ta","content":"<p>##<strong>mstest</strong></p>\n<p>links:</p>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.assert.aspx\" target=\"_blank\" rel=\"external\">assert</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.aspx\" target=\"_blank\" rel=\"external\">collection assert</a></li>\n</ul>\n<p>##<strong>Nunit</strong></p>\n<p>links:</p>\n<ul>\n<li><a href=\"https://github.com/nunit/docs/wiki/Attributes\" target=\"_blank\" rel=\"external\">Attributes</a></li>\n<li><a href=\"https://github.com/nunit/docs/wiki/Assertions\" target=\"_blank\" rel=\"external\">Assertion</a></li>\n</ul>\n<p>##<strong>MOQ</strong><br>Example<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IFoo</span> &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoSomething</span>(<span class=\"params\"><span class=\"keyword\">string</span></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> calls;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mock = <span class=\"keyword\">new</span> Mock&lt;IFoo&gt;();</span><br><span class=\"line\">mock.Setup(foo =&gt; foo.DoSomething(It.IsAny&lt;<span class=\"keyword\">string</span>&gt;())).</span><br><span class=\"line\">         Returns((<span class=\"keyword\">string</span> s) =&gt; s.ToLower())</span><br><span class=\"line\">         .Callback(() =&gt; ++calls);</span><br><span class=\"line\"></span><br><span class=\"line\">mock.SetupProperty(f =&gt; f.Name, <span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">mock.VerifySet(foo =&gt; foo.Name = <span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mock.Verify(foo =&gt; foo.DoSomething(It.IsAny&lt;<span class=\"keyword\">string</span>&gt;()), Times.Never());</span><br></pre></td></tr></table></figure></p>\n<p>##<strong>Test internal Classes</strong></p>\n<p>In assembly info to test internal classes you will need to know the name of the file<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[assembly: InternalsVisibleToAttribute(<span class=\"string\">\"&lt;Project Name&gt;\"</span>)]</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>##<strong>mstest</strong></p>\n<p>links:</p>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.assert.aspx\">assert</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.aspx\">collection assert</a></li>\n</ul>\n<p>##<strong>Nunit</strong></p>\n<p>links:</p>\n<ul>\n<li><a href=\"https://github.com/nunit/docs/wiki/Attributes\">Attributes</a></li>\n<li><a href=\"https://github.com/nunit/docs/wiki/Assertions\">Assertion</a></li>\n</ul>\n<p>##<strong>MOQ</strong><br>Example<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IFoo</span> &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoSomething</span>(<span class=\"params\"><span class=\"keyword\">string</span></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> calls;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mock = <span class=\"keyword\">new</span> Mock&lt;IFoo&gt;();</span><br><span class=\"line\">mock.Setup(foo =&gt; foo.DoSomething(It.IsAny&lt;<span class=\"keyword\">string</span>&gt;())).</span><br><span class=\"line\">         Returns((<span class=\"keyword\">string</span> s) =&gt; s.ToLower())</span><br><span class=\"line\">         .Callback(() =&gt; ++calls);</span><br><span class=\"line\"></span><br><span class=\"line\">mock.SetupProperty(f =&gt; f.Name, <span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">mock.VerifySet(foo =&gt; foo.Name = <span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mock.Verify(foo =&gt; foo.DoSomething(It.IsAny&lt;<span class=\"keyword\">string</span>&gt;()), Times.Never());</span><br></pre></td></tr></table></figure></p>\n<p>##<strong>Test internal Classes</strong></p>\n<p>In assembly info to test internal classes you will need to know the name of the file<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[assembly: InternalsVisibleToAttribute(<span class=\"string\">\"&lt;Project Name&gt;\"</span>)]</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ubuntu not restarting or turning off","date":"2016-05-17T19:15:00.000Z","_content":"Lately I have been getting tired of my operating system just not wanting to reboot or sometimes not turning off. This happens in my version off ubuntu due a problem with the energy management. \nThe way to solve this is changing the boot parameters for the operating system. So you will need to follow the next steps:\n1. Edit the grub settings file (if you use nano as at the end do CTRL+O to save CTRL+X to close)\n```\nsudo nano /etc/default/grub\n```\n2. Eddit the next line to look similar to the next one.\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash acpi=force reboot=pci\"\n```\n3. Call the command line to update the grub (os selector for operating system)\n```\nsudo update-grub\n```\nfirst reboot this will not make any difference but after your first reboot as the computer will boot with the new parameters this should solve the issue.\n\n\nDisclaimer: this works in my case, every installation in different hardware than the one in my computer could have different outcomes (that i cannot be held accountable for, so use at your discretion), including  booting issues that you might solve by removing the previous parameters before booting Ubuntu from grub.\n","source":"_posts/04-17-ubuntu-not-turning-off-or-restartingmd.md","raw":"---\ntitle: ubuntu not restarting or turning off \ndate: 2016-05-17 21:15:00\ntags: daily, learn\n---\nLately I have been getting tired of my operating system just not wanting to reboot or sometimes not turning off. This happens in my version off ubuntu due a problem with the energy management. \nThe way to solve this is changing the boot parameters for the operating system. So you will need to follow the next steps:\n1. Edit the grub settings file (if you use nano as at the end do CTRL+O to save CTRL+X to close)\n```\nsudo nano /etc/default/grub\n```\n2. Eddit the next line to look similar to the next one.\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash acpi=force reboot=pci\"\n```\n3. Call the command line to update the grub (os selector for operating system)\n```\nsudo update-grub\n```\nfirst reboot this will not make any difference but after your first reboot as the computer will boot with the new parameters this should solve the issue.\n\n\nDisclaimer: this works in my case, every installation in different hardware than the one in my computer could have different outcomes (that i cannot be held accountable for, so use at your discretion), including  booting issues that you might solve by removing the previous parameters before booting Ubuntu from grub.\n","slug":"04-17-ubuntu-not-turning-off-or-restartingmd","published":1,"updated":"2016-05-17T19:29:42.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0j7000rc0wl65rtwa2j","content":"<p>Lately I have been getting tired of my operating system just not wanting to reboot or sometimes not turning off. This happens in my version off ubuntu due a problem with the energy management.<br>The way to solve this is changing the boot parameters for the operating system. So you will need to follow the next steps:</p>\n<ol>\n<li><p>Edit the grub settings file (if you use nano as at the end do CTRL+O to save CTRL+X to close)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/default/grub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Eddit the next line to look similar to the next one.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash acpi=force reboot=pci&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Call the command line to update the grub (os selector for operating system)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>first reboot this will not make any difference but after your first reboot as the computer will boot with the new parameters this should solve the issue.</p>\n<p>Disclaimer: this works in my case, every installation in different hardware than the one in my computer could have different outcomes (that i cannot be held accountable for, so use at your discretion), including  booting issues that you might solve by removing the previous parameters before booting Ubuntu from grub.</p>\n","excerpt":"","more":"<p>Lately I have been getting tired of my operating system just not wanting to reboot or sometimes not turning off. This happens in my version off ubuntu due a problem with the energy management.<br>The way to solve this is changing the boot parameters for the operating system. So you will need to follow the next steps:</p>\n<ol>\n<li><p>Edit the grub settings file (if you use nano as at the end do CTRL+O to save CTRL+X to close)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/default/grub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Eddit the next line to look similar to the next one.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash acpi=force reboot=pci&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Call the command line to update the grub (os selector for operating system)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>first reboot this will not make any difference but after your first reboot as the computer will boot with the new parameters this should solve the issue.</p>\n<p>Disclaimer: this works in my case, every installation in different hardware than the one in my computer could have different outcomes (that i cannot be held accountable for, so use at your discretion), including  booting issues that you might solve by removing the previous parameters before booting Ubuntu from grub.</p>\n"},{"title":"C# - Extension methods overlap with linq","date":"2016-01-28T19:22:36.000Z","_content":"\nI have hit a corner case of extension methods and LINQ. Today I was declaring some extension methods to make my code more readable.So I created an extension method that gets an object and performs a direct cast:\n\n```csharp\npublic static class GeneralExtensions\n{\n    public static T Cast<T>(this object o)\n    {\n    \treturn (T)o;\n    }\n}\n```\n\nThe intention was to be able to call my direct castings by something like this:\n```csharp\nMyObject.CastTo<MyInterface>();\n```\n\nIt happens that in the same namespace I have an extension method that has a LINQ expression\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic static class EnumExtenstions\n{\n\tpublic static IEnumerable<string> UseLinq(this IEnumerable<object> collection)\n\t{\n\t\treturn (from object value in collection select value.ToString() ).ToList();\n\t}\n}\n```\n\nAdding this first extension method to my code base cause the next error\n```\nError\tCS1936\tCould not find an implementation of the query pattern for source type 'object'.  'Select' not found.\n```\n\nHaving both extension methods in different namespaces (and not referred), or rename ```Cast<T>``` to something different solves the issue. This is caused for an overlap of the extension methods where the nearest one to the code is the one called.\n\n##**How bad Extension Methods over object could go?**\n\nThis is an extract from the answer of Eric Lippert, regarding the code:\n\n```csharp\npublic static class GeneralExtensions\n{\n    public static T Cast<T>(this object o)\n    {\n    \treturn (T)o;\n    }\n}\n```\nSide Effects of the ```cast<T>```:\n* ```Cast<int>(123)``` unnecessarily boxes the int, ```(int)123``` does not.\n* ```Cast< short >(123)``` fails but ```(short)123``` succeeds. There is no conversion from a boxed int to a short.\n* Suppose you have a user-defined conversion from Animal to Shape. ```Cast<Shape>(new Tiger())``` fails but ```(Shape) new Tiger()``` succeeds.\n* Suppose q is a nullable int that happens to be null. ```Cast<string>(q)``` succeeds! But ```(string)q``` would fail at compile time\n* Etc\n\nCast method has some overlap with the real cast operator but is not a substitute for it. To capture the semantics of the cast operator there is a need to use dynamic, which starts the compiler at runtime and does the compile time analysis on runtime types.\n","source":"_posts/01-28-extension-methods-overlap-with-linq.md","raw":"---\ntitle: C# - Extension methods overlap with linq\ndate: 2016-01-28 20:22:36\ntags: daily, learn\n---\n\nI have hit a corner case of extension methods and LINQ. Today I was declaring some extension methods to make my code more readable.So I created an extension method that gets an object and performs a direct cast:\n\n```csharp\npublic static class GeneralExtensions\n{\n    public static T Cast<T>(this object o)\n    {\n    \treturn (T)o;\n    }\n}\n```\n\nThe intention was to be able to call my direct castings by something like this:\n```csharp\nMyObject.CastTo<MyInterface>();\n```\n\nIt happens that in the same namespace I have an extension method that has a LINQ expression\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic static class EnumExtenstions\n{\n\tpublic static IEnumerable<string> UseLinq(this IEnumerable<object> collection)\n\t{\n\t\treturn (from object value in collection select value.ToString() ).ToList();\n\t}\n}\n```\n\nAdding this first extension method to my code base cause the next error\n```\nError\tCS1936\tCould not find an implementation of the query pattern for source type 'object'.  'Select' not found.\n```\n\nHaving both extension methods in different namespaces (and not referred), or rename ```Cast<T>``` to something different solves the issue. This is caused for an overlap of the extension methods where the nearest one to the code is the one called.\n\n##**How bad Extension Methods over object could go?**\n\nThis is an extract from the answer of Eric Lippert, regarding the code:\n\n```csharp\npublic static class GeneralExtensions\n{\n    public static T Cast<T>(this object o)\n    {\n    \treturn (T)o;\n    }\n}\n```\nSide Effects of the ```cast<T>```:\n* ```Cast<int>(123)``` unnecessarily boxes the int, ```(int)123``` does not.\n* ```Cast< short >(123)``` fails but ```(short)123``` succeeds. There is no conversion from a boxed int to a short.\n* Suppose you have a user-defined conversion from Animal to Shape. ```Cast<Shape>(new Tiger())``` fails but ```(Shape) new Tiger()``` succeeds.\n* Suppose q is a nullable int that happens to be null. ```Cast<string>(q)``` succeeds! But ```(string)q``` would fail at compile time\n* Etc\n\nCast method has some overlap with the real cast operator but is not a substitute for it. To capture the semantics of the cast operator there is a need to use dynamic, which starts the compiler at runtime and does the compile time analysis on runtime types.\n","slug":"01-28-extension-methods-overlap-with-linq","published":1,"updated":"2016-04-27T19:19:44.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciod8r0j9000tc0wlzrcoyj13","content":"<p>I have hit a corner case of extension methods and LINQ. Today I was declaring some extension methods to make my code more readable.So I created an extension method that gets an object and performs a direct cast:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">GeneralExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Cast&lt;T&gt;(<span class=\"keyword\">this</span> <span class=\"keyword\">object</span> o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> (T)o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The intention was to be able to call my direct castings by something like this:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyObject.CastTo&lt;MyInterface&gt;();</span><br></pre></td></tr></table></figure></p>\n<p>It happens that in the same namespace I have an extension method that has a LINQ expression<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">EnumExtenstions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">UseLinq</span>(<span class=\"params\"><span class=\"keyword\">this</span> IEnumerable&lt;<span class=\"keyword\">object</span>&gt; collection</span>)</span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">from</span> <span class=\"keyword\">object</span> <span class=\"keyword\">value</span> <span class=\"keyword\">in</span> collection <span class=\"keyword\">select</span> <span class=\"keyword\">value</span>.ToString() ).ToList();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Adding this first extension method to my code base cause the next error<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error\tCS1936\tCould not find an implementation of the query pattern for source type &apos;object&apos;.  &apos;Select&apos; not found.</span><br></pre></td></tr></table></figure></p>\n<p>Having both extension methods in different namespaces (and not referred), or rename <figure class=\"highlight plain\"><figcaption><span>to something different solves the issue. This is caused for an overlap of the extension methods where the nearest one to the code is the one called.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##**How bad Extension Methods over object could go?**</span><br><span class=\"line\"></span><br><span class=\"line\">This is an extract from the answer of Eric Lippert, regarding the code:</span><br><span class=\"line\"></span><br><span class=\"line\">```csharp</span><br><span class=\"line\">public static class GeneralExtensions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static T Cast&lt;T&gt;(this object o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \treturn (T)o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Side Effects of the <code>cast&lt;T&gt;</code>:</p>\n<ul>\n<li><code>Cast&lt;int&gt;(123)</code> unnecessarily boxes the int, <code>(int)123</code> does not.</li>\n<li><code>Cast&lt; short &gt;(123)</code> fails but <code>(short)123</code> succeeds. There is no conversion from a boxed int to a short.</li>\n<li>Suppose you have a user-defined conversion from Animal to Shape. <code>Cast&lt;Shape&gt;(new Tiger())</code> fails but <code>(Shape) new Tiger()</code> succeeds.</li>\n<li>Suppose q is a nullable int that happens to be null. <code>Cast&lt;string&gt;(q)</code> succeeds! But <code>(string)q</code> would fail at compile time</li>\n<li>Etc</li>\n</ul>\n<p>Cast method has some overlap with the real cast operator but is not a substitute for it. To capture the semantics of the cast operator there is a need to use dynamic, which starts the compiler at runtime and does the compile time analysis on runtime types.</p>\n","excerpt":"","more":"<p>I have hit a corner case of extension methods and LINQ. Today I was declaring some extension methods to make my code more readable.So I created an extension method that gets an object and performs a direct cast:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">GeneralExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Cast&lt;T&gt;(<span class=\"keyword\">this</span> <span class=\"keyword\">object</span> o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> (T)o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The intention was to be able to call my direct castings by something like this:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyObject.CastTo&lt;MyInterface&gt;();</span><br></pre></td></tr></table></figure></p>\n<p>It happens that in the same namespace I have an extension method that has a LINQ expression<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">EnumExtenstions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">UseLinq</span>(<span class=\"params\"><span class=\"keyword\">this</span> IEnumerable&lt;<span class=\"keyword\">object</span>&gt; collection</span>)</span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">from</span> <span class=\"keyword\">object</span> <span class=\"keyword\">value</span> <span class=\"keyword\">in</span> collection <span class=\"keyword\">select</span> <span class=\"keyword\">value</span>.ToString() ).ToList();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Adding this first extension method to my code base cause the next error<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error\tCS1936\tCould not find an implementation of the query pattern for source type &apos;object&apos;.  &apos;Select&apos; not found.</span><br></pre></td></tr></table></figure></p>\n<p>Having both extension methods in different namespaces (and not referred), or rename <figure class=\"highlight plain\"><figcaption><span>to something different solves the issue. This is caused for an overlap of the extension methods where the nearest one to the code is the one called.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##**How bad Extension Methods over object could go?**</span><br><span class=\"line\"></span><br><span class=\"line\">This is an extract from the answer of Eric Lippert, regarding the code:</span><br><span class=\"line\"></span><br><span class=\"line\">```csharp</span><br><span class=\"line\">public static class GeneralExtensions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static T Cast&lt;T&gt;(this object o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \treturn (T)o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Side Effects of the <code>cast&lt;T&gt;</code>:</p>\n<ul>\n<li><code>Cast&lt;int&gt;(123)</code> unnecessarily boxes the int, <code>(int)123</code> does not.</li>\n<li><code>Cast&lt; short &gt;(123)</code> fails but <code>(short)123</code> succeeds. There is no conversion from a boxed int to a short.</li>\n<li>Suppose you have a user-defined conversion from Animal to Shape. <code>Cast&lt;Shape&gt;(new Tiger())</code> fails but <code>(Shape) new Tiger()</code> succeeds.</li>\n<li>Suppose q is a nullable int that happens to be null. <code>Cast&lt;string&gt;(q)</code> succeeds! But <code>(string)q</code> would fail at compile time</li>\n<li>Etc</li>\n</ul>\n<p>Cast method has some overlap with the real cast operator but is not a substitute for it. To capture the semantics of the cast operator there is a need to use dynamic, which starts the compiler at runtime and does the compile time analysis on runtime types.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciod8r0ib0005c0wlg15no331","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0ig0008c0wlz6mqplzq"},{"post_id":"ciod8r0hy0000c0wl3mnhno09","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0ii000ac0wldp993fkh"},{"post_id":"ciod8r0ie0007c0wlz23wpnye","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0ip000dc0wlh3h8n2np"},{"post_id":"ciod8r0ig0009c0wl0t005imy","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0is000fc0wlf95gb9pz"},{"post_id":"ciod8r0i50002c0wl1vqw2dhg","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0it000hc0wlrkoz90ir"},{"post_id":"ciod8r0il000cc0wlv3sllwc3","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0iv000jc0wlfv7r1hfw"},{"post_id":"ciod8r0ip000ec0wlglnqad0w","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0iz000lc0wldkd4jfrf"},{"post_id":"ciod8r0ia0004c0wlq8rf0avc","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0j1000nc0wlajl0420i"},{"post_id":"ciod8r0is000gc0wlzdhcv87w","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0j5000qc0wl616utk3d"},{"post_id":"ciod8r0iu000ic0wl967zz7n3","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0j8000sc0wlknzfvgqp"},{"post_id":"ciod8r0iw000kc0wlii14pu1n","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0je000uc0wlqqbojre3"},{"post_id":"ciod8r0j3000oc0wljqb4p7ta","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0jg000vc0wl1mw74brk"},{"post_id":"ciod8r0j7000rc0wl65rtwa2j","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0jh000wc0wly3t9y8ww"},{"post_id":"ciod8r0j9000tc0wlzrcoyj13","tag_id":"ciod8r0i80003c0wlaex130xi","_id":"ciod8r0ji000xc0wlns082snd"},{"post_id":"ciod8r0j0000mc0wlqq3rryhk","tag_id":"ciod8r0j5000pc0wlnzorhx4n","_id":"ciod8r0ji000yc0wl4vpn51mf"}],"Tag":[{"name":"daily, learn","_id":"ciod8r0i80003c0wlaex130xi"},{"name":"daily, learn, sonarqube, LDAP","_id":"ciod8r0j5000pc0wlnzorhx4n"}]}}